#+title: Interactive

* Introduction
This folder will contain the interactive program for installing WRF and WPS.

* Functions
Here you can find the definitions of the functions used in the interactive program.
** Help
#+begin_src bash :tangle main.sh :session s1
#!/bin/bash
echo "#!/bin/bash" > loadEnv.sh

Help() {
    echo

}
#+end_src
** Menu1
#+begin_src bash :tangle main.sh :session s1 :results output
Menu1() {
    echo "
    +-----------------------------+
    +      WRF-WPS Installer      +
    +-----------------------------+
    +                             +
    +        1. Automatic         +
    +        2. Custom            +
    +                             +
    +-----------------------------+
    "
}
#+end_src

** Menu2
#+begin_src bash :tangle main.sh :session s1 :results output
Menu2() {
    echo "
    +---------------------------------------+
    +           Custom Installation         +
    +---------------------------------------+
    +                                       +
    + 1. Setup spack                        +
    + 2. Installing gcc                     +
    + 3. Installing packages using spack    +
    + 4. WRF deps install                   +
    + 5. Choose WRF                         +
    + 6. Install WPS                        +
    + 7. Clear screen                       +
    + 8. Remove current installations       +
    + 9. Exit                               +
    +                                       +
    +---------------------------------------+
    "
}
#+end_src

** Info Automatic
#+begin_src bash :tangle main.sh :session s1 :results output
InfoAutomatic() {
    echo "
    +---------------------------------------+
    +         Automatic Installation        +
    +---------------------------------------+
    +                                       +
    + This will install the software in     +
    + default location.                     +
    + Make sure it's empty.                 +
    +                                       +
    +---------------------------------------+
    Default location: /scratch/$USER
    "
}

#+end_src
** Installing gcc
#+begin_src bash :tangle main.sh :session s1 :results output
InstallingGCC() {
    if [ -e loadEnv.sh ]; then
        source $main/loadEnv.sh
    else
        echo "No environment file found..."
    fi
    spack install -j40 gcc@13.4.0 languages=c,c++,fortran
    spack load gcc@13.4.0
    spack compiler add
    echo "spack load gcc@13.4.0" > loadEnv.sh
}

#+end_src
** Installing packages using spack
#+begin_src bash :tangle main.sh :session s1 :results output
InstallingPackagesSpack() {
    if [ -e loadEnv.sh ]; then
        source $main/loadEnv.sh
    else
        echo "No environment file found..."
    fi
    spack install -j40 python
    spack load python
    echo "spack load python" > loadEnv.sh
    spack install -j40 openmpi@4.1.1
    spack load openmpi@4.1.1
    echo "spack load openmpi@4.1.1" > loadEnv.sh
}

#+end_src
** WRF dependencies installations
#+begin_src bash :tangle main.sh :session s1 :results output
InstallingWrfDeps() {
    source $main/wrf-dep-install.sh
}

#+end_src
** Choose WRF
#+begin_src bash :tangle main.sh :session s1 :results output
ChooseWRF() {
    echo "1. wrf@4.5.1"
    echo "2. latest"
    read -p "Choose wrf: " $opt
    version=" "
    if [ $opt == 1 ]; then
        version=4.5.1
    elif [ $opt == 2 ]; then
        version=4.6.1
    else
        echo "Invalid option!!!"
    fi
}

#+end_src
** Installing WPS
#+begin_src bash :tangle main.sh :session s1 :results output
InstallingWPS() {
    if [ -e loadEnv.sh ]; then
        source $main/loadEnv.sh
    else
        echo "No environment file found..."
    fi
    if [ $version == 4.5.1 ]; then
        spack install -j40 wps ^wrf@4.5.1
    else
        spack install -j40 wps
    fi
}
#+end_src
* Main
This will contain the main function.
#+begin_src bash :tangle main.sh :session s1 :results output
main="$(pwd)"

Main() {
    Menu1
    read -p "Enter your choice [1]: " opt
    if [ -z "$opt" ] || [ $opt == 1 ]; then
        echo "Default choice: Automatic Installation!!!"
        read -p "Enter the full path where you want to install the packages: " path
        if [ -z "$(ls -A $path)" ]; then
            bash ../install.sh $path
        else
            InfoAutomatic
        fi

    else

        read -p "Enter the full path where you want to install everything: " path
        if [ -z "$path" ]; then
            echo "PATH should not be empty..."
            exit
        else
            echo "Installation path : $path"
        fi
        while [ 1 -eq 1 ]
        do
            Menu2
            read -p "Enter your option: " opt
            if [ -z $opt ]; then
                echo "You didn't enter anything..."
            elif [ $opt == 1 ]; then
                echo "Setting up spack..."
                source setupSpack.sh $path
                echo "Spack setup complete!!!"
            elif [ $opt == 2 ]; then
                InstallingGCC
            elif [ $opt == 3 ]; then
                InstallingPackagesSpack
            elif [ $opt == 4 ]; then
                InstallingWrfDeps
            elif [ $opt == 5 ]; then
                ChooseWRF
            elif [ $opt == 6 ]; then
                InstallingWPS
            elif [ $opt == 7 ]; then
                clear
            elif [ $opt == 8 ]; then
                echo "TODO Add commands for removing"
            elif [ $opt == 9 ]; then
                break
            else
                echo "Invalid Option!!!"
            fi
        done
    fi

}

Main

#+end_src

* Setup spack
This will create a program setupSpack.sh which can be used to perform ~spack~ related tasks (install/backup).
** Choose version
#+begin_src bash :tangle setupSpack.sh
#!/bin/bash

submitDir=" "
if [ $# == 0 ]; then
    echo "Current folder location selected for spack installation..."
    submitDir="$(pwd)"
else
    submitDir=$1
fi

ChooseSpackVersion() {
    echo "
    +---------------------------------------+
    +          Choose spack version         +
    +---------------------------------------+
    +                                       +
    + 1. releases/v0.23                     +
    + 2. develop(latest)                    +
    + 3. Backup current installations       +
    + 4. Clear                              +
    + 5. Exit                               +
    +                                       +
    +---------------------------------------+
    "
}
#+end_src

#+RESULTS:

** Setting up releases/v0.23
#+begin_src bash :tangle setupSpack.sh

SetupSpack0_23() {
    cd $submitDir
    echo "Changed to folder $(pwd)"
    if [ -e spack ]; then
        echo "Spack already found in current folder (Use backup)..."
    else
        git clone https://github.com/spack/spack.git
        cd spack
        echo "Changed to folder $(pwd)"
        git checkout releases/v0.23
        source share/spack/setup-env.sh
        echo "source $(pwd)/share/spack/setup-env.sh" >> loadEnv.sh
        cd $submitDir
        echo "Changed to folder $(pwd)"
        spack info gcc
    fi
}

#+end_src

#+RESULTS:

** Setting up develop
#+begin_src bash :tangle setupSpack.sh

SetupSpackDevelop() {
    cd $submitDir
    echo "Changed to folder $(pwd)"
    if [ -e spack ]; then
        echo "Spack already found in current folder (Use backup)..."
    else
        git clone https://github.com/spack/spack.git
        cd spack
        echo "Changed to folder $(pwd)"
        source share/spack/setup-env.sh
        echo "source $(pwd)/share/spack/setup-env.sh" >> loadEnv.sh
        git clone https://github.com/spack/spack-packages.git
        spack repo set --destination "$(pwd)/spack-packages" builtin
        cd $submitDir
        echo "Changed to folder $(pwd)"
        spack info gcc
    fi
}

#+end_src

#+RESULTS:

** Backup Current Installation
Used for backup of spack.
#+begin_src bash :tangle setupSpack.sh

currentDate=$(date +%d%b%Y)
currentTime=$(date +%H:%M)

BackupSpack() {
    echo "This will rename your spack present in current folder and also your spack configuration folder ~/.spack "
    if [ -e spack ]; then
        echo "spack folder found in your current directory..."
        read -p "Do you want to continue? [n] " option
        if [ "$option" == "y" ]; then
            mv spack spack.bak_"$currentDate"_"$currentTime"
            echo "Backup of spack completed!!!"
            if [ -e ~/.spack ]; then
                echo "Spack configuration folder found in ~/.spack "
                read -p "Do you want to backup? [n] " option
                if [ "$option" == "y" ]; then
                    mv ~/.spack ~/.spack.bak_"$currentDate"_"$currentTime"
                    echo "Backup of configuration completed!!!"
                else
                    echo "Chose not to backup spack configuration..."
                fi
            else
                echo "No configuration found in ~/.spack..."
            fi
        else
            echo "Chose not to backup spack..."
        fi
    else
        echo "No spack found in current directory..."
        if [ -e ~/.spack ]; then
            echo "Spack configuration folder found in ~/.spack "
            read -p "Do you want to backup? [n] " option
            if [ "$option" == "y" ]; then
                mv ~/.spack ~/.spack.bak_"$currentDate"_"$currentTime"
                echo "Backup of configuration completed!!!"
            else
                echo "Chose not to backup spack configuration..."
            fi
        else
            echo "No configuration found in ~/.spack..."
        fi

    fi
}

#+end_src

#+RESULTS:

** setupSpack
#+begin_src bash :tangle setupSpack.sh
while [ 1 -eq 1 ]
do
    ChooseSpackVersion
    read -p "Enter your choice : " opt
    if [ $opt == 1 ]; then
        SetupSpack0_23
    elif [ $opt == 2 ]; then
        SetupSpackDevelop
    elif [ $opt == 3 ]; then
        BackupSpack
    elif [ $opt == 4 ]; then
        clear
    elif [ $opt == 5 ]; then
        break
    else
        echo "Invalid option!!!"
    fi
done

#+end_src

* WRF Dependencies installation script
This contains the script given in [[https://forum.mmm.ucar.edu/threads/full-wrf-and-wps-installation-example-gnu.12385/][https://forum.mmm.ucar.edu/threads/full-wrf-and-wps-installation-example-gnu.12385]]. It is used for installing dependencies required for WRF.
#+begin_src bash :tangle wrf-dep-install.sh
#!/usr/bin/sh
# GNU Compilation of WRF dependencies
DIR=$PWD/wrf_dependencies

# These only need to be set again in new shell environments if using the older make build system
export NETCDF=$DIR/netcdf
export LD_LIBRARY_PATH=$NETCDF/lib:$DIR/grib2/lib

# Set these again in any new shell environment to build and run WRF
export PATH=$NETCDF/bin:$DIR/mpich/bin:${PATH}
export JASPERLIB=$DIR/grib2/lib
export JASPERINC=$DIR/grib2/include

# Use these ONLY when building these dependencies. These SHOULD NOT be set when building WRF or WPS
export CC=gcc
export CXX=g++
export FC=gfortran
export FCFLAGS="-m64 -fallow-argument-mismatch"
export F77=gfortran
export FFLAGS="-m64 -fallow-argument-mismatch"
export LDFLAGS="-L$NETCDF/lib -L$DIR/grib2/lib"
export CPPFLAGS="-I$NETCDF/include -I$DIR/grib2/include -fcommon"

export WRF_DEP_JOBS=16


wget https://www2.mmm.ucar.edu/wrf/OnLineTutorial/compile_tutorial/tar_files/zlib-1.2.11.tar.gz
tar xzvf zlib-1.2.11.tar.gz
cd zlib-1.2.11
./configure --prefix=$DIR/grib2
make -j $WRF_DEP_JOBS
make install
cd ..
#rm -rf zlib*

wget https://github.com/HDFGroup/hdf5/archive/hdf5-1_10_5.tar.gz
tar xzvf hdf5-1_10_5.tar.gz
cd hdf5-hdf5-1_10_5
./configure --prefix=$DIR/netcdf --with-zlib=$DIR/grib2 --enable-fortran --enable-shared
make -j $WRF_DEP_JOBS
make install
cd ..
#rm -rf hdf5*


wget https://github.com/Unidata/netcdf-c/archive/v4.7.2.tar.gz
tar xzvf v4.7.2.tar.gz
cd netcdf-c-4.7.2
./configure --prefix=$DIR/netcdf --disable-dap --enable-netcdf-4 --enable-hdf5 --enable-shared
make -j $WRF_DEP_JOBS
make install
cd ..
#rm -rf v4.7.2.tar.gz netcdf-c*

export PATH=$DIR/netcdf/bin:$PATH
export NETCDF=$DIR/netcdf

export LIBS='-lnetcdf -lz'
wget https://github.com/Unidata/netcdf-fortran/archive/v4.5.2.tar.gz
tar xzvf v4.5.2.tar.gz
cd netcdf-fortran-4.5.2
./configure --prefix=$DIR/netcdf --disable-hdf5 --enable-shared
make -j $WRF_DEP_JOBS
make install
cd ..
#rm -rf netcdf-fortran* v4.5.2.tar.gz

wget https://www2.mmm.ucar.edu/wrf/OnLineTutorial/compile_tutorial/tar_files/mpich-3.0.4.tar.gz
tar -xf mpich-3.0.4.tar.gz
cd mpich-3.0.4
./configure --prefix=$DIR/mpich
make -j $WRF_DEP_JOBS 2>&1
make install
cd ..
#rm -rf mpich*

wget https://www2.mmm.ucar.edu/wrf/OnLineTutorial/compile_tutorial/tar_files/libpng-1.2.50.tar.gz
tar xzvf libpng-1.2.50.tar.gz
cd libpng-1.2.50
./configure --prefix=$DIR/grib2
make -j $WRF_DEP_JOBS
make install
cd ..
#rm -rf libpng*

wget https://www2.mmm.ucar.edu/wrf/OnLineTutorial/compile_tutorial/tar_files/jasper-1.900.1.tar.gz
tar xzvf jasper-1.900.1.tar.gz
cd jasper-1.900.1
./configure --prefix=$DIR/grib2
make
make install
cd ..
#rm -rf jasper* ._jasper-1.900.1

# After this in a new shell you should redo the environment settings found at the top of this script
#+end_src
